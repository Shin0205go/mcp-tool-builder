/**
 * CRUD Template Pack ABI 1.0.0 Tests
 */
import { strict as assert } from 'assert';
import { test } from 'node:test';
import { CrudTemplatePack } from '../../src/core/template_packs/crud_pack.js';
import { TemplateContext, FeatureSet } from '../../src/core/template_packs/base.js';
import { Action, Entity, View } from '../../src/core/spec/builder_spec.js';

const crudPack = new CrudTemplatePack();

// Mock context for tests
const mockContext: TemplateContext = {
  spec: {
    name: 'test-spec',
    version: '1.0.0',
    entities: [],
    actions: [],
    views: [],
    flows: [],
    policies: [],
    capabilities: []
  },
  providers: { storage: 'postgres' },
  config: {
    outputDir: './test-output',
    language: 'typescript',
    uiRenderer: 'rawHtml',
    target: 'docker',
    features: { crud: true, workflow: false, analytics: false, realtime: false, auth: false, search: false, export: false, i18n: false },
    i18n: { locale: 'en', supportedLocales: ['en'] }
  },
  metadata: {}
};

test('CrudTemplatePack ABI compliance', () => {
  // ABI version check
  assert.equal(crudPack.abi, '1.0.0');
  assert.equal(crudPack.name, 'crud');
  assert.equal(crudPack.version, '1.0.0');
});

test('supports() correctly identifies compatible features', () => {
  const crudFeatures: FeatureSet = {
    crud: true,
    workflow: false,
    analytics: false,
    realtime: false,
    auth: false,
    search: false,
    export: false,
    i18n: false
  };

  const workflowFeatures: FeatureSet = {
    crud: true,
    workflow: true, // CRUD pack should not support workflow
    analytics: false,
    realtime: false,
    auth: false,
    search: false,
    export: false,
    i18n: false
  };

  assert.equal(crudPack.supports(crudFeatures), true);
  assert.equal(crudPack.supports(workflowFeatures), false);
});

test('renderTool() generates ABI-compliant tool code', async () => {
  const mockAction: Action = {
    name: 'createUser',
    type: 'create',
    entity: 'User',
    description: 'Create a new user',
    parameters: [
      { name: 'name', type: 'string', required: true, description: 'User name' },
      { name: 'email', type: 'string', required: true, description: 'User email' }
    ],
    validation: [],
    async: false,
    permissions: ['user.create']
  };

  const result = await crudPack.renderTool(mockAction, mockContext);

  // Check output structure
  assert.equal(result.path, 'mcp-tools/createUser.ts');
  assert.equal(result.type, 'code');
  
  // Check generated content contains ABI requirements
  assert.ok(result.content.includes('Generated by CRUD Template Pack ABI 1.0.0'));
  assert.ok(result.content.includes('import { z } from \'zod\''));
  assert.ok(result.content.includes('async handler('));
  assert.ok(result.content.includes('type: "text" as const'));
  assert.ok(result.content.includes('isError: true'));
});

test('renderDAO() generates ABI-compliant DAO code', async () => {
  const mockEntity: Entity = {
    name: 'Customer',
    fields: [
      { name: 'id', type: 'string', required: true, primaryKey: true, description: 'Customer ID' },
      { name: 'name', type: 'string', required: true, description: 'Customer name' },
      { name: 'email', type: 'string', required: true, unique: true, description: 'Customer email' }
    ],
    relationships: [],
    indexes: [],
    constraints: []
  };

  const result = await crudPack.renderDAO(mockEntity, mockContext);

  // Check output structure
  assert.equal(result.path, 'dao/CustomerDAO.ts');
  assert.equal(result.type, 'code');
  
  // Check DAO implements required methods
  assert.ok(result.content.includes('async find('));
  assert.ok(result.content.includes('async get('));
  assert.ok(result.content.includes('async create('));
  assert.ok(result.content.includes('async update('));
  assert.ok(result.content.includes('async delete('));
  
  // Check ABI compliance
  assert.ok(result.content.includes('Generated by CRUD Template Pack ABI 1.0.0'));
});

test('renderView() generates ABI-compliant UI components', async () => {
  const mockView: View = {
    name: 'userCreateForm',
    type: 'form',
    entity: 'User',
    title: 'Create User',
    fields: [
      { name: 'name', type: 'string', required: true, label: 'Name', description: 'User name' },
      { name: 'email', type: 'string', required: true, label: 'Email', description: 'User email' }
    ],
    columns: [],
    filters: [],
    actions: []
  };

  const result = await crudPack.renderView(mockView, mockContext);

  // Check output structure
  assert.equal(result.path, 'ui-resources/userCreateForm.html');
  assert.equal(result.type, 'code');
  
  // Check ABI compliance for UI
  assert.ok(result.content.includes('Generated by CRUD Template Pack ABI 1.0.0'));
  assert.ok(result.content.includes('window.parent.postMessage'));
  assert.ok(result.content.includes('mcp:tool.invoke'));
  assert.ok(result.content.includes('requestId'));
  assert.ok(result.content.includes('JSON.parse(document.body.dataset.props'));
});

test('renderMigration() generates valid SQL migrations', async () => {
  const mockEntities: Entity[] = [
    {
      name: 'User',
      fields: [
        { name: 'id', type: 'string', required: true, primaryKey: true, description: 'User ID' },
        { name: 'name', type: 'string', required: true, description: 'User name' }
      ],
      relationships: [],
      indexes: [{ field: 'name', type: 'btree' }],
      constraints: []
    }
  ];

  const result = await crudPack.renderMigration(mockEntities, mockContext);

  assert.equal(result.path, 'migrations/001_initial.ts');
  assert.equal(result.type, 'code');
  assert.ok(result.content.includes('CREATE TABLE IF NOT EXISTS'));
  assert.ok(result.content.includes('DROP TABLE IF EXISTS'));
  assert.ok(result.content.includes('export async function up'));
  assert.ok(result.content.includes('export async function down'));
});

test('renderConfig() generates valid package.json', async () => {
  const mockSpec = {
    name: 'test-project',
    description: 'Test project description',
    version: '1.0.0',
    entities: [],
    actions: [],
    views: [],
    flows: [],
    policies: [],
    capabilities: []
  };

  const result = await crudPack.renderConfig(mockSpec, mockContext);

  assert.equal(result.length, 1);
  assert.equal(result[0].path, 'package.json');
  assert.equal(result[0].type, 'config');
  
  const packageJson = JSON.parse(result[0].content);
  assert.equal(packageJson.name, 'test-project');
  assert.ok(packageJson.dependencies['@modelcontextprotocol/sdk']);
  assert.ok(packageJson.dependencies['zod']);
  assert.ok(packageJson.scripts.build);
  assert.ok(packageJson.scripts.start);
});

console.log('âœ… All CRUD Template Pack ABI tests passed');