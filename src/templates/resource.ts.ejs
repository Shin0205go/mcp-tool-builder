/**
 * UI Resource for <%= name %> - Embedded Dashboard
 * Returns HTML with postMessage broker for tool invocation
 */

export function buildDashboardHtml(nonce?: string): string {
  const cspNonce = nonce || Math.random().toString(36).slice(2);
  
  return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="default-src 'none'; script-src 'nonce-${cspNonce}'; style-src 'unsafe-inline'; frame-ancestors 'self';">
    <title><%= name %> Dashboard</title>
    <style>
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0; padding: 20px; background: #f5f5f5;
        }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { border-bottom: 1px solid #eee; padding-bottom: 20px; margin-bottom: 20px; }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        .card { border: 1px solid #ddd; border-radius: 8px; padding: 16px; background: #fafafa; }
        .card h3 { margin-top: 0; color: #333; }
        .btn { background: #007cba; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; margin-right: 8px; }
        .btn:hover { background: #005a8b; }
        .btn-secondary { background: #6c757d; }
        .btn-secondary:hover { background: #545b62; }
        .form-group { margin-bottom: 12px; }
        .form-group label { display: block; margin-bottom: 4px; font-weight: 500; }
        .form-group input { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
        .status { padding: 8px; border-radius: 4px; margin: 8px 0; }
        .status.success { background: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .status.error { background: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
        .list-item { border-bottom: 1px solid #eee; padding: 12px 0; display: flex; justify-content: space-between; align-items: center; }
        .list-item:last-child { border-bottom: none; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1><%= name %> Dashboard</h1>
            <p>Manage your <%= name.toLowerCase() %> data via MCP tools</p>
        </div>
        
        <div class="grid">
            <% entities.forEach(entity => { %>
            <div class="card">
                <h3><%= entity.name %> Management</h3>
                <p><%= entity.description || 'Manage ' + entity.name.toLowerCase() + ' records' %></p>
                
                <!-- Create Form -->
                <div id="create-<%= entity.name.toLowerCase() %>-form">
                    <h4>Create New <%= entity.name %></h4>
                    <% entity.fields.forEach(field => { %>
                    <% if (field.type === 'uuid' || field.type === 'datetime') return; %>
                    <div class="form-group">
                        <label for="<%= field.name %>"><%= field.name.charAt(0).toUpperCase() + field.name.slice(1) %>:</label>
                        <input type="<%= field.type === 'email' ? 'email' : field.type === 'number' ? 'number' : 'text' %>" 
                               id="<%= field.name %>" 
                               name="<%= field.name %>"
                               <%= !field.nullable ? 'required' : '' %>>
                    </div>
                    <% }); %>
                    <button class="btn" onclick="create<%= entity.name %>()">Create <%= entity.name %></button>
                </div>
                
                <!-- List Section -->
                <div style="margin-top: 20px;">
                    <h4><%= entity.name %> List</h4>
                    <button class="btn btn-secondary" onclick="list<%= entity.name %>s()">Refresh List</button>
                    <div id="<%= entity.name.toLowerCase() %>-list"></div>
                </div>
            </div>
            <% }); %>
        </div>
        
        <!-- Status Messages -->
        <div id="status-messages"></div>
    </div>

    <script nonce="${cspNonce}">
        // MCP Tool Broker - postMessage communication with ORIGIN security
        const ALLOWED_ORIGINS = ['https://claude.ai', 'http://localhost', 'https://localhost'];
        const allowedTools = [
            <% entities.forEach(entity => { %>
            'create-<%= entity.name.toLowerCase() %>',
            'get-<%= entity.name.toLowerCase() %>',
            'update-<%= entity.name.toLowerCase() %>',
            'delete-<%= entity.name.toLowerCase() %>',
            'list-<%= entity.name.toLowerCase() %>s',
            <% }); %>
        ];
        
        function invokeTool(toolName, parameters) {
            if (!allowedTools.includes(toolName)) {
                showError(\`Tool \${toolName} is not allowed\`);
                return;
            }
            
            return new Promise((resolve, reject) => {
                const requestId = Date.now().toString();
                const messageHandler = (event) => {
                    // ORIGIN security check
                    const isAllowedOrigin = ALLOWED_ORIGINS.some(allowed => 
                        event.origin.startsWith(allowed)
                    );
                    if (!isAllowedOrigin) {
                        console.warn('Rejected postMessage from unauthorized origin:', event.origin);
                        return;
                    }
                    
                    if (event.data.type === 'mcp:tool.result' && event.data.requestId === requestId) {
                        window.removeEventListener('message', messageHandler);
                        if (event.data.error) {
                            reject(new Error(event.data.error));
                        } else {
                            resolve(event.data.result);
                        }
                    }
                };
                
                window.addEventListener('message', messageHandler);
                window.parent.postMessage({
                    type: 'mcp:tool.invoke',
                    requestId,
                    toolName,
                    parameters
                }, '*');
                
                // Timeout after 10 seconds
                setTimeout(() => {
                    window.removeEventListener('message', messageHandler);
                    reject(new Error('Tool invocation timeout'));
                }, 10000);
            });
        }
        
        function showSuccess(message) {
            const div = document.createElement('div');
            div.className = 'status success';
            div.textContent = message;
            document.getElementById('status-messages').appendChild(div);
            setTimeout(() => div.remove(), 5000);
        }
        
        function showError(message) {
            const div = document.createElement('div');
            div.className = 'status error';
            div.textContent = message;
            document.getElementById('status-messages').appendChild(div);
            setTimeout(() => div.remove(), 5000);
        }
        
        <% entities.forEach(entity => { %>
        // <%= entity.name %> functions
        async function create<%= entity.name %>() {
            try {
                const formData = {};
                <% entity.fields.forEach(field => { %>
                <% if (field.type === 'uuid' || field.type === 'datetime') return; %>
                const <%= field.name %>Value = document.getElementById('<%= field.name %>').value;
                if (<%= field.name %>Value) formData.<%= field.name %> = <%= field.type === 'number' ? 'Number(' + field.name + 'Value)' : field.name + 'Value' %>;
                <% }); %>
                
                const result = await invokeTool('create-<%= entity.name.toLowerCase() %>', formData);
                showSuccess('Created <%= entity.name.toLowerCase() %> successfully');
                
                // Clear form
                <% entity.fields.forEach(field => { %>
                <% if (field.type === 'uuid' || field.type === 'datetime') return; %>
                document.getElementById('<%= field.name %>').value = '';
                <% }); %>
                
                // Refresh list
                await list<%= entity.name %>s();
            } catch (error) {
                showError('Failed to create <%= entity.name.toLowerCase() %>: ' + error.message);
            }
        }
        
        async function list<%= entity.name %>s() {
            try {
                const results = await invokeTool('list-<%= entity.name.toLowerCase() %>s', { page: 1, limit: 20 });
                const listDiv = document.getElementById('<%= entity.name.toLowerCase() %>-list');
                
                if (results.length === 0) {
                    listDiv.innerHTML = '<p>No <%= entity.name.toLowerCase() %>s found</p>';
                    return;
                }
                
                let html = '';
                results.forEach(item => {
                    html += \`<div class="list-item">
                        <div>
                            <strong>\${item.<%= entity.fields.find(f => f.type === 'string' || f.type === 'email')?.name || 'id' %>}</strong><br>
                            <small>Created: \${new Date(item.created_at).toLocaleDateString()}</small>
                        </div>
                        <div>
                            <button class="btn btn-secondary" onclick="delete<%= entity.name %>('\${item.id}')">Delete</button>
                        </div>
                    </div>\`;
                });
                
                listDiv.innerHTML = html;
            } catch (error) {
                showError('Failed to load <%= entity.name.toLowerCase() %>s: ' + error.message);
            }
        }
        
        async function delete<%= entity.name %>(id) {
            if (!confirm('Are you sure you want to delete this <%= entity.name.toLowerCase() %>?')) return;
            
            try {
                await invokeTool('delete-<%= entity.name.toLowerCase() %>', { id });
                showSuccess('Deleted <%= entity.name.toLowerCase() %> successfully');
                await list<%= entity.name %>s();
            } catch (error) {
                showError('Failed to delete <%= entity.name.toLowerCase() %>: ' + error.message);
            }
        }
        <% }); %>
        
        // Auto-load lists on page load
        window.addEventListener('load', () => {
            <% entities.forEach(entity => { %>
            list<%= entity.name %>s();
            <% }); %>
        });
    </script>
</body>
</html>`;
}