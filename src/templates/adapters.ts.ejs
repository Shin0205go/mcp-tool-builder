/**
 * Type adapters for <%= entity.name %> - MANDATORY for all API responses
 * Enforces contract compliance between DB and API
 */

import type { <%= entity.name %>Type, Create<%= entity.name %>Type, Update<%= entity.name %>Type } from '../schemas/<%= entity.name.toLowerCase() %>.js';

// Database row type (what PostgreSQL returns)
export interface Db<%= entity.name %>Row {
  id: string; // UUID from gen_random_uuid()
  created_at: Date; // TIMESTAMPTZ from now()
  updated_at: Date; // TIMESTAMPTZ from now() 
<% entity.fields.forEach(field => { %>
<% if (field.type === 'uuid' || field.type === 'datetime') return; %>
<% if (field.type === 'datetime') { %>
  <%= field.name %>: Date<%= field.nullable ? ' | null' : '' %>;
<% } else if (field.type === 'number') { %>
  <%= field.name %>: number<%= field.nullable ? ' | null' : '' %>;
<% } else { %>
  <%= field.name %>: string<%= field.nullable ? ' | null' : '' %>;
<% } %>
<% }); %>
}

/**
 * DB → API conversion (MANDATORY on all tool outputs)
 */
export function toApi<%= entity.name %>(row: Db<%= entity.name %>Row): <%= entity.name %>Type {
  // Ensure proper type conversions for all fields
  const toIso = (v: Date | null | undefined): string | undefined => {
    if (!v) return undefined;
    return v instanceof Date ? v.toISOString() : String(v);
  };

  return {
    id: String(row.id), // Explicit string conversion for UUID
    created_at: toIso(row.created_at),
    updated_at: toIso(row.updated_at),
<% entity.fields.forEach(field => { %>
<% if (field.type === 'uuid' || field.type === 'datetime') return; %>
<% if (field.type === 'datetime') { %>
    <%= field.name %>: toIso(row.<%= field.name %>),
<% } else if (field.type === 'number') { %>
<% if (field.nullable) { %>
    <%= field.name %>: row.<%= field.name %> === null || row.<%= field.name %> === undefined ? null : Number(row.<%= field.name %>),
<% } else { %>
    <%= field.name %>: Number(row.<%= field.name %> || 0),
<% } %>
<% } else { // string types %>
<% if (field.nullable) { %>
    <%= field.name %>: row.<%= field.name %> === null || row.<%= field.name %> === undefined ? null : String(row.<%= field.name %>),
<% } else { %>
    <%= field.name %>: String(row.<%= field.name %> || ''),
<% } %>
<% } %>
<% }); %>
  };
}

/**
 * Create API → Storage conversion
 */
export function toStorage<%= entity.name %>FromCreate(input: Create<%= entity.name %>Type): Partial<Db<%= entity.name %>Row> {
  return {
<% entity.fields.forEach(field => { %>
<% if (field.type === 'uuid' || field.type === 'datetime') return; %>
    <%= field.name %>: input.<%= field.name %><%= field.nullable ? ' ?? null' : '' %>,
<% }); %>
    // id, created_at, updated_at are auto-generated by DB
  };
}

/**
 * Update API → Storage conversion  
 */
export function toStorage<%= entity.name %>FromUpdate(input: Update<%= entity.name %>Type): Partial<Db<%= entity.name %>Row> {
  return {
<% entity.fields.forEach(field => { %>
<% if (field.type === 'uuid' || field.type === 'datetime') return; %>
<% if (field.nullable) { %>
    ...(input.<%= field.name %> !== undefined && { <%= field.name %>: input.<%= field.name %> }),
<% } else { %>
    ...(input.<%= field.name %> && { <%= field.name %>: input.<%= field.name %> }),
<% } %>
<% }); %>
    // updated_at will be set by DB trigger or explicit NOW()
  };
}