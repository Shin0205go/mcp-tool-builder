export function buildDashboardHtml(): string {
  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= entity.name %> Dashboard</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
    }
    
    .container {
      max-width: 1200px;
      margin: 0 auto;
      background: white;
      border-radius: 20px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
      overflow: hidden;
    }
    
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 30px;
      text-align: center;
    }
    
    .header h1 {
      font-size: 2.5em;
      margin-bottom: 10px;
    }
    
    .header p {
      opacity: 0.9;
      font-size: 1.1em;
    }
    
    .status-bar {
      background: rgba(255,255,255,0.1);
      padding: 10px 20px;
      margin-top: 20px;
      border-radius: 10px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .status-indicator {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .status-dot {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      background: #4ade80;
      animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
    
    .content {
      padding: 30px;
    }
    
    .section {
      margin-bottom: 30px;
    }
    
    .section-title {
      font-size: 1.5em;
      color: #333;
      margin-bottom: 20px;
      padding-bottom: 10px;
      border-bottom: 2px solid #e5e7eb;
    }
    
    .form-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 15px;
      margin-bottom: 20px;
    }
    
    .form-group {
      display: flex;
      flex-direction: column;
    }
    
    .form-group label {
      font-size: 0.9em;
      color: #6b7280;
      margin-bottom: 5px;
      font-weight: 500;
    }
    
    .form-group input,
    .form-group select {
      padding: 10px 15px;
      border: 2px solid #e5e7eb;
      border-radius: 8px;
      font-size: 1em;
      transition: all 0.3s;
    }
    
    .form-group input:focus,
    .form-group select:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    .btn-group {
      display: flex;
      gap: 10px;
      flex-wrap: wrap;
    }
    
    .btn {
      padding: 12px 24px;
      border: none;
      border-radius: 8px;
      font-size: 1em;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
      display: inline-flex;
      align-items: center;
      gap: 8px;
    }
    
    .btn-primary {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }
    
    .btn-primary:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
    }
    
    .btn-secondary {
      background: #f3f4f6;
      color: #4b5563;
    }
    
    .btn-secondary:hover {
      background: #e5e7eb;
    }
    
    .btn-danger {
      background: #ef4444;
      color: white;
    }
    
    .btn-danger:hover {
      background: #dc2626;
    }
    
    .data-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    
    .data-table thead {
      background: #f9fafb;
    }
    
    .data-table th {
      padding: 12px;
      text-align: left;
      font-weight: 600;
      color: #4b5563;
      border-bottom: 2px solid #e5e7eb;
    }
    
    .data-table td {
      padding: 12px;
      border-bottom: 1px solid #f3f4f6;
    }
    
    .data-table tbody tr:hover {
      background: #f9fafb;
    }
    
    .table-actions {
      display: flex;
      gap: 5px;
    }
    
    .btn-small {
      padding: 5px 10px;
      font-size: 0.9em;
    }
    
    .log-container {
      background: #1f2937;
      color: #10b981;
      padding: 20px;
      border-radius: 8px;
      font-family: 'Courier New', monospace;
      font-size: 0.9em;
      max-height: 300px;
      overflow-y: auto;
      margin-top: 20px;
    }
    
    .log-entry {
      margin-bottom: 5px;
      padding: 5px;
      border-left: 3px solid transparent;
    }
    
    .log-entry.info {
      border-left-color: #3b82f6;
      color: #93c5fd;
    }
    
    .log-entry.success {
      border-left-color: #10b981;
      color: #86efac;
    }
    
    .log-entry.error {
      border-left-color: #ef4444;
      color: #fca5a5;
    }
    
    .loading {
      display: none;
      text-align: center;
      padding: 20px;
    }
    
    .loading.active {
      display: block;
    }
    
    .spinner {
      border: 3px solid #e5e7eb;
      border-top: 3px solid #667eea;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin: 0 auto;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .empty-state {
      text-align: center;
      padding: 40px;
      color: #6b7280;
    }
    
    .empty-state svg {
      width: 100px;
      height: 100px;
      margin-bottom: 20px;
      opacity: 0.3;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üìä <%= entity.name %> Dashboard</h1>
      <p>Manage your <%= entity.name.toLowerCase() %> data with ease</p>
      <div class="status-bar">
        <div class="status-indicator">
          <span class="status-dot"></span>
          <span id="connection-status">Connected</span>
        </div>
        <div id="timestamp"></div>
      </div>
    </div>
    
    <div class="content">
      <!-- Create Section -->
      <div class="section">
        <h2 class="section-title">Create New <%= entity.name %></h2>
        <form id="create-form">
          <div class="form-grid">
            <% entity.fields.forEach(field => { %>
            <% if (field.type === 'uuid' || field.type === 'datetime') return; %>
            <div class="form-group">
              <label for="create-<%= field.name %>"><%= field.name.charAt(0).toUpperCase() + field.name.slice(1) %><% if (!field.nullable) { %> *<% } %></label>
              <% if (field.type === 'string') { %>
              <% if (field.name.includes('email')) { %>
              <input type="email" id="create-<%= field.name %>" name="<%= field.name %>" <% if (!field.nullable) { %>required<% } %> placeholder="Enter <%= field.name %>">
              <% } else { %>
              <input type="text" id="create-<%= field.name %>" name="<%= field.name %>" <% if (!field.nullable) { %>required<% } %> placeholder="Enter <%= field.name %>">
              <% } %>
              <% } else if (field.type === 'number') { %>
              <input type="number" id="create-<%= field.name %>" name="<%= field.name %>" <% if (!field.nullable) { %>required<% } %> placeholder="Enter <%= field.name %>">
              <% } else if (field.type === 'boolean') { %>
              <select id="create-<%= field.name %>" name="<%= field.name %>" <% if (!field.nullable) { %>required<% } %>>
                <option value="true">Yes</option>
                <option value="false">No</option>
              </select>
              <% } %>
            </div>
            <% }); %>
          </div>
          <div class="btn-group">
            <button type="submit" class="btn btn-primary">
              ‚ûï Create <%= entity.name %>
            </button>
            <button type="reset" class="btn btn-secondary">
              üîÑ Reset Form
            </button>
          </div>
        </form>
      </div>
      
      <!-- List Section -->
      <div class="section">
        <h2 class="section-title"><%= entity.name %> List</h2>
        <div class="btn-group">
          <button id="refresh-btn" class="btn btn-secondary">
            üîÑ Refresh List
          </button>
          <button id="export-btn" class="btn btn-secondary">
            üì• Export Data
          </button>
        </div>
        
        <div id="loading" class="loading">
          <div class="spinner"></div>
          <p>Loading <%= entity.name.toLowerCase() %> data...</p>
        </div>
        
        <div id="list-container">
          <table class="data-table" id="data-table">
            <thead>
              <tr>
                <% entity.fields.forEach(field => { %>
                <th><%= field.name.charAt(0).toUpperCase() + field.name.slice(1) %></th>
                <% }); %>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="table-body">
              <!-- Data will be inserted here -->
            </tbody>
          </table>
          
          <div id="empty-state" class="empty-state" style="display: none;">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
            </svg>
            <h3>No <%= entity.name %> Found</h3>
            <p>Create your first <%= entity.name.toLowerCase() %> using the form above</p>
          </div>
        </div>
      </div>
      
      <!-- Activity Log -->
      <div class="section">
        <h2 class="section-title">Activity Log</h2>
        <div class="log-container" id="log-container">
          <div class="log-entry info">üöÄ Dashboard initialized</div>
          <div class="log-entry info">‚è≥ Waiting for connection...</div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // MCP UI Communication Protocol
    const ORIGIN = window.location.origin === 'null' ? '*' : window.location.origin;
    
    // Utility functions
    const log = (message, type = 'info') => {
      const logContainer = document.getElementById('log-container');
      const entry = document.createElement('div');
      entry.className = \`log-entry \${type}\`;
      const timestamp = new Date().toLocaleTimeString();
      entry.textContent = \`[\${timestamp}] \${message}\`;
      logContainer.appendChild(entry);
      logContainer.scrollTop = logContainer.scrollHeight;
    };
    
    const generateRequestId = () => {
      return crypto.randomUUID ? crypto.randomUUID() : 'req-' + Date.now() + '-' + Math.random().toString(36).slice(2);
    };
    
    // Pending requests tracking
    const pendingRequests = new Map();
    
    // Tool invocation
    function invokeTool(tool, params) {
      return new Promise((resolve, reject) => {
        const requestId = generateRequestId();
        
        pendingRequests.set(requestId, { resolve, reject, tool });
        
        const message = {
          type: 'mcp:tool.invoke',
          requestId,
          tool,
          params
        };
        
        log(\`üì§ Invoking \${tool}...\`, 'info');
        window.parent.postMessage(message, ORIGIN);
        
        // Timeout after 30 seconds
        setTimeout(() => {
          if (pendingRequests.has(requestId)) {
            pendingRequests.delete(requestId);
            reject(new Error('Request timeout'));
            log(\`‚è±Ô∏è Request \${requestId} timed out\`, 'error');
          }
        }, 30000);
      });
    }
    
    // Message handler
    window.addEventListener('message', (event) => {
      // Allow messages from parent frame
      if (event.source !== window.parent) return;
      
      const msg = event.data;
      if (!msg || typeof msg !== 'object') return;
      
      switch (msg.type) {
        case 'mcp:bootstrap':
          log('‚úÖ Connected to host', 'success');
          document.getElementById('connection-status').textContent = 'Connected';
          
          if (msg.data) {
            log(\`üì¶ Received bootstrap data: \${Object.keys(msg.data).join(', ')}\`, 'info');
            
            // Process initial data
            const listKey = 'list<%= entity.name.toLowerCase() %>s';
            if (msg.data[listKey]) {
              renderTable(msg.data[listKey]);
            }
          }
          break;
          
        case 'mcp:tool.result':
          const pending = pendingRequests.get(msg.requestId);
          if (pending) {
            pendingRequests.delete(msg.requestId);
            pending.resolve(msg.result);
            log(\`‚úÖ \${pending.tool} completed\`, 'success');
          }
          break;
          
        case 'mcp:tool.error':
          const failed = pendingRequests.get(msg.requestId);
          if (failed) {
            pendingRequests.delete(msg.requestId);
            failed.reject(new Error(msg.error));
            log(\`‚ùå \${failed.tool} failed: \${msg.error}\`, 'error');
          }
          break;
      }
    });
    
    // Send ready signal
    log('üéØ Sending ready signal...', 'info');
    window.parent.postMessage({ type: 'mcp:ui.ready' }, ORIGIN);
    
    // UI Functions
    function showLoading() {
      document.getElementById('loading').classList.add('active');
    }
    
    function hideLoading() {
      document.getElementById('loading').classList.remove('active');
    }
    
    function renderTable(data) {
      const tbody = document.getElementById('table-body');
      const emptyState = document.getElementById('empty-state');
      
      if (!data || data.length === 0) {
        tbody.innerHTML = '';
        emptyState.style.display = 'block';
        return;
      }
      
      emptyState.style.display = 'none';
      tbody.innerHTML = data.map(item => \`
        <tr>
          <% entity.fields.forEach(field => { %>
          <td>\${item['<%= field.name %>'] ?? '-'}</td>
          <% }); %>
          <td>
            <div class="table-actions">
              <button class="btn btn-small btn-secondary" onclick="viewItem('\${item.id}')">üëÅÔ∏è</button>
              <button class="btn btn-small btn-primary" onclick="editItem('\${item.id}')">‚úèÔ∏è</button>
              <button class="btn btn-small btn-danger" onclick="deleteItem('\${item.id}')">üóëÔ∏è</button>
            </div>
          </td>
        </tr>
      \`).join('');
    }
    
    // Event Handlers
    document.getElementById('create-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const data = {};
      
      for (const [key, value] of formData.entries()) {
        // Convert empty strings to null for nullable fields
        data[key] = value === '' ? null : value;
      }
      
      try {
        showLoading();
        const result = await invokeTool('create<%= entity.name.toLowerCase() %>', data);
        log(\`‚úÖ Created new <%= entity.name %> with ID: \${result.id}\`, 'success');
        e.target.reset();
        await refreshList();
      } catch (error) {
        log(\`‚ùå Failed to create: \${error.message}\`, 'error');
      } finally {
        hideLoading();
      }
    });
    
    document.getElementById('refresh-btn').addEventListener('click', () => {
      refreshList();
    });
    
    document.getElementById('export-btn').addEventListener('click', async () => {
      try {
        showLoading();
        const data = await invokeTool('list<%= entity.name.toLowerCase() %>s', { limit: 1000 });
        
        const csv = [
          [<% entity.fields.forEach((field, i) => { %>'<%= field.name %>'<% if (i < entity.fields.length - 1) { %>, <% } %><% }); %>].join(','),
          ...data.map(item => [
            <% entity.fields.forEach((field, i) => { %>item['<%= field.name %>']<% if (i < entity.fields.length - 1) { %>, <% } %><% }); %>
          ].join(','))
        ].join('\\n');
        
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = '<%= entity.name.toLowerCase() %>_export.csv';
        a.click();
        
        log('üì• Data exported successfully', 'success');
      } catch (error) {
        log(\`‚ùå Export failed: \${error.message}\`, 'error');
      } finally {
        hideLoading();
      }
    });
    
    async function refreshList() {
      try {
        showLoading();
        const data = await invokeTool('list<%= entity.name.toLowerCase() %>s', { page: 1, limit: 20 });
        renderTable(data);
        log(\`üìä Loaded \${data.length} <%= entity.name.toLowerCase() %> records\`, 'info');
      } catch (error) {
        log(\`‚ùå Failed to refresh: \${error.message}\`, 'error');
      } finally {
        hideLoading();
      }
    }
    
    async function viewItem(id) {
      try {
        const item = await invokeTool('get<%= entity.name.toLowerCase() %>', { id });
        alert(JSON.stringify(item, null, 2));
      } catch (error) {
        log(\`‚ùå Failed to view: \${error.message}\`, 'error');
      }
    }
    
    async function editItem(id) {
      // Simplified edit - in production, show modal with form
      const updates = prompt('Enter updates as JSON:');
      if (!updates) return;
      
      try {
        const data = JSON.parse(updates);
        const result = await invokeTool('update<%= entity.name.toLowerCase() %>', { id, ...data });
        log(\`‚úÖ Updated <%= entity.name %> \${id}\`, 'success');
        await refreshList();
      } catch (error) {
        log(\`‚ùå Failed to update: \${error.message}\`, 'error');
      }
    }
    
    async function deleteItem(id) {
      if (!confirm('Are you sure you want to delete this item?')) return;
      
      try {
        await invokeTool('delete<%= entity.name.toLowerCase() %>', { id });
        log(\`‚úÖ Deleted <%= entity.name %> \${id}\`, 'success');
        await refreshList();
      } catch (error) {
        log(\`‚ùå Failed to delete: \${error.message}\`, 'error');
      }
    }
    
    // Update timestamp
    setInterval(() => {
      document.getElementById('timestamp').textContent = new Date().toLocaleString();
    }, 1000);
  </script>
</body>
</html>`;
}