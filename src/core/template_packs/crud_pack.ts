import { BaseTemplatePack, FeatureSet, TemplateContext, GeneratedFile, DashboardMetric } from './base.js';
import { BuilderSpec, Entity, Action, View } from '../spec/builder_spec.js';

/**
 * CRUD Template Pack - ABI 1.0.0 Implementation
 * Generates basic Create, Read, Update, Delete functionality
 */
export class CrudTemplatePack extends BaseTemplatePack {
  name = 'crud';
  version = '1.0.0';
  description = 'Basic CRUD operations template pack';
  abi = '1.0.0';

  supports(features: FeatureSet): boolean {
    // CRUD pack supports basic CRUD operations and optional features
    return features.crud && !features.workflow; // Workflow requires different pack
  }

  async renderTool(action: Action, context: TemplateContext): Promise<GeneratedFile> {
    const { spec, providers, config } = context;
    const toolName = this.toCamelCase(action.name);
    const className = this.toPascalCase(action.entity || 'Entity');
    
    const template = `/**
 * MCP Tool: {{toolName}}
 * Generated by CRUD Template Pack ABI 1.0.0
 */
import { z } from 'zod';
import { {{className}}Schema } from '../schemas/{{entityFile}}.js';
import { {{className}}DAO } from '../dao/{{className}}DAO.js';
import { {{operation}}{{className}} } from '../business-logic/{{operation}}{{className}}.js';

const {{toolName}}ArgsSchema = z.object({
{{#each parameters}}
  {{name}}: z.{{type}}(){{#if optional}}.optional(){{/if}},
{{/each}}
});

export const {{toolName}}Tool = {
  name: '{{toolName}}',
  description: '{{description}}',
  inputSchema: {{toolName}}ArgsSchema,
  
  async handler(args: z.infer<typeof {{toolName}}ArgsSchema>) {
    try {
      // Input validation
      const validArgs = {{toolName}}ArgsSchema.parse(args);
      
      // Business logic execution
      const result = await {{operation}}{{className}}(validArgs);
      
      return {
        content: [{
          type: "text" as const,
          text: JSON.stringify(result, null, 2)
        }]
      };
    } catch (error: any) {
      return {
        content: [{
          type: "text" as const,
          text: \`Error: \${error.message}\`
        }],
        isError: true
      };
    }
  }
};`;

    const content = this.renderTemplate(template, {
      toolName,
      className,
      entityFile: this.toSnakeCase(action.entity || 'entity'),
      operation: this.getOperationType(action.type),
      description: action.description || `${action.type} ${action.entity || 'entity'}`,
      parameters: action.inputs || []
    });

    return {
      path: `mcp-tools/${toolName}.ts`,
      content,
      type: 'code'
    };
  }

  async renderView(view: View, context: TemplateContext): Promise<GeneratedFile> {
    const viewName = this.toCamelCase(view.name);
    const entityName = this.toPascalCase(view.entity || 'Entity');
    
    const template = `/**
 * UI View: {{viewName}}
 * Generated by CRUD Template Pack ABI 1.0.0
 */
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>{{title}}</title>
  <style>
    .crud-form { max-width: 500px; margin: 20px; }
    .crud-list { margin: 20px; }
    .form-group { margin-bottom: 15px; }
    .form-label { display: block; margin-bottom: 5px; font-weight: bold; }
    .form-input { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
    .btn { padding: 8px 16px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }
    .btn:hover { background: #0056b3; }
  </style>
</head>
<body>
  <div class="crud-{{viewType}}">
    <h2>{{title}}</h2>
    {{#if isForm}}
    <form id="{{viewName}}Form">
      {{#each fields}}
      <div class="form-group">
        <label class="form-label" for="{{name}}">{{label}}</label>
        <input class="form-input" type="{{inputType}}" id="{{name}}" name="{{name}}" {{#if required}}required{{/if}}>
      </div>
      {{/each}}
      <button type="submit" class="btn">{{submitLabel}}</button>
    </form>
    {{else}}
    <div id="{{viewName}}List">
      <table>
        <thead>
          <tr>
            {{#each columns}}
            <th>{{label}}</th>
            {{/each}}
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="dataRows">
          <!-- Data populated by JavaScript -->
        </tbody>
      </table>
    </div>
    {{/if}}
  </div>
  
  <script>
    // ABI 1.0.0 compliant UI communication
    const viewProps = JSON.parse(document.body.dataset.props || '{}');
    
    {{#if isForm}}
    document.getElementById('{{viewName}}Form').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData.entries());
      
      // Send via postMessage with idempotency
      window.parent.postMessage({
        type: 'mcp:tool.invoke',
        requestId: 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
        tool: '{{toolName}}',
        params: data
      }, viewProps.origin || '*');
    });
    {{else}}
    // Load list data
    window.addEventListener('load', () => {
      window.parent.postMessage({
        type: 'mcp:tool.invoke',
        requestId: 'list_' + Date.now(),
        tool: 'list{{entityName}}',
        params: {}
      }, viewProps.origin || '*');
    });
    {{/if}}
  </script>
</body>
</html>`;

    const isForm = view.type === 'form';
    const content = this.renderTemplate(template, {
      viewName,
      entityName,
      title: view.metadata?.title || `${view.type} ${view.entity || 'Entity'}`,
      viewType: view.type,
      isForm,
      fields: view.fields || [],
      columns: view.metadata?.columns || [],
      toolName: isForm ? `create${entityName}` : `list${entityName}`,
      submitLabel: isForm ? 'Save' : 'Submit'
    });

    return {
      path: `ui-resources/${viewName}.html`,
      content,
      type: 'code'
    };
  }

  async renderDAO(entity: Entity, context: TemplateContext): Promise<GeneratedFile> {
    const className = this.toPascalCase(entity.name);
    const tableName = this.toSnakeCase(entity.name);
    
    const template = `/**
 * DAO: {{className}}
 * Generated by CRUD Template Pack ABI 1.0.0
 */
import { Pool } from 'pg';
import { {{className}}Schema } from '../schemas/{{schemaFile}}.js';
import { z } from 'zod';

type {{className}} = z.infer<typeof {{className}}Schema>;

export class {{className}}DAO {
  constructor(private pool: Pool) {}

  async find(query: any = {}, options: { limit?: number; offset?: number } = {}): Promise<{{className}}[]> {
    const { limit = 100, offset = 0 } = options;
    
    let sql = 'SELECT * FROM {{tableName}}';
    const values: any[] = [];
    
    // Simple query building (production would use query builder)
    if (Object.keys(query).length > 0) {
      const conditions = Object.keys(query).map((key, index) => {
        values.push(query[key]);
        return \`\${key} = $\${index + 1}\`;
      });
      sql += \` WHERE \${conditions.join(' AND ')}\`;
    }
    
    sql += \` LIMIT $\${values.length + 1} OFFSET $\${values.length + 2}\`;
    values.push(limit, offset);
    
    const result = await this.pool.query(sql, values);
    return result.rows.map(row => {{className}}Schema.parse(row));
  }

  async get(id: string): Promise<{{className}} | null> {
    const sql = 'SELECT * FROM {{tableName}} WHERE id = $1';
    const result = await this.pool.query(sql, [id]);
    
    if (result.rows.length === 0) {
      return null;
    }
    
    return {{className}}Schema.parse(result.rows[0]);
  }

  async create(data: Partial<{{className}}>): Promise<{{className}}> {
    const validData = {{className}}Schema.parse(data);
    
    const fields = Object.keys(validData);
    const values = Object.values(validData);
    const placeholders = values.map((_, index) => \`$\${index + 1}\`);
    
    const sql = \`
      INSERT INTO {{tableName}} (\${fields.join(', ')})
      VALUES (\${placeholders.join(', ')})
      RETURNING *
    \`;
    
    const result = await this.pool.query(sql, values);
    return {{className}}Schema.parse(result.rows[0]);
  }

  async update(id: string, data: Partial<{{className}}>): Promise<{{className}}> {
    const fields = Object.keys(data);
    const values = Object.values(data);
    const setClause = fields.map((field, index) => \`\${field} = $\${index + 1}\`);
    
    const sql = \`
      UPDATE {{tableName}}
      SET \${setClause.join(', ')}
      WHERE id = $\${values.length + 1}
      RETURNING *
    \`;
    
    const result = await this.pool.query(sql, [...values, id]);
    
    if (result.rows.length === 0) {
      throw new Error('Record not found');
    }
    
    return {{className}}Schema.parse(result.rows[0]);
  }

  async delete(id: string): Promise<boolean> {
    const sql = 'DELETE FROM {{tableName}} WHERE id = $1';
    const result = await this.pool.query(sql, [id]);
    return result.rowCount > 0;
  }
}`;

    const content = this.renderTemplate(template, {
      className,
      tableName,
      schemaFile: this.toSnakeCase(entity.name)
    });

    return {
      path: `dao/${className}DAO.ts`,
      content,
      type: 'code'
    };
  }

  async renderDashboard(metrics: DashboardMetric[], context: TemplateContext): Promise<GeneratedFile> {
    const template = `/**
 * Dashboard
 * Generated by CRUD Template Pack ABI 1.0.0
 */
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Dashboard</title>
  <style>
    .dashboard { padding: 20px; }
    .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; }
    .metric-card { background: #f8f9fa; padding: 20px; border-radius: 8px; border: 1px solid #dee2e6; }
    .metric-value { font-size: 2em; font-weight: bold; color: #007bff; }
    .metric-label { color: #666; margin-top: 5px; }
  </style>
</head>
<body>
  <div class="dashboard">
    <h1>Dashboard</h1>
    <div class="metrics">
      {{#each metrics}}
      <div class="metric-card">
        <div class="metric-value" id="metric-{{name}}">Loading...</div>
        <div class="metric-label">{{label}}</div>
      </div>
      {{/each}}
    </div>
  </div>
  
  <script>
    // ABI 1.0.0 compliant metric loading
    const viewProps = JSON.parse(document.body.dataset.props || '{}');
    
    // Load metrics
    async function loadMetrics() {
      {{#each metrics}}
      try {
        window.parent.postMessage({
          type: 'mcp:tool.invoke',
          requestId: 'metric_{{name}}_' + Date.now(),
          tool: 'getMetric',
          params: { metric: '{{name}}' }
        }, viewProps.origin || '*');
      } catch (error) {
        document.getElementById('metric-{{name}}').textContent = 'Error';
      }
      {{/each}}
    }
    
    // Listen for metric responses
    window.addEventListener('message', (event) => {
      if (event.data.type === 'mcp:tool.result') {
        // Update metric display (simplified)
        console.log('Metric result:', event.data.result);
      }
    });
    
    window.addEventListener('load', loadMetrics);
  </script>
</body>
</html>`;

    const content = this.renderTemplate(template, { metrics });

    return {
      path: 'ui-resources/dashboard.html',
      content,
      type: 'code'
    };
  }

  async renderMigration(entities: Entity[], context: TemplateContext): Promise<GeneratedFile> {
    const template = `/**
 * Database Migration
 * Generated by CRUD Template Pack ABI 1.0.0
 */
import { Pool } from 'pg';

export async function up(pool: Pool): Promise<void> {
  {{#each entities}}
  // Create {{name}} table
  await pool.query(\`
    CREATE TABLE IF NOT EXISTS {{tableName}} (
      {{#each fields}}
      {{name}} {{sqlType}}{{#if constraints}} {{constraints}}{{/if}},
      {{/each}}
      created_at TIMESTAMP DEFAULT NOW(),
      updated_at TIMESTAMP DEFAULT NOW()
    )
  \`);
  
  {{#if indexes}}
  // Create indexes for {{name}}
  {{#each indexes}}
  await pool.query(\`CREATE INDEX IF NOT EXISTS idx_{{../tableName}}_{{field}} ON {{../tableName}} ({{field}})\`);
  {{/each}}
  {{/if}}
  
  {{/each}}
}

export async function down(pool: Pool): Promise<void> {
  {{#each entities}}
  await pool.query(\`DROP TABLE IF EXISTS {{tableName}} CASCADE\`);
  {{/each}}
}`;

    const entitiesWithSql = entities.map(entity => ({
      ...entity,
      tableName: this.toSnakeCase(entity.name),
      fields: entity.fields.map(field => ({
        ...field,
        sqlType: this.mapTypeToSql(field.type),
        constraints: this.mapConstraintsToSql(field)
      }))
    }));

    const content = this.renderTemplate(template, {
      entities: entitiesWithSql
    });

    return {
      path: 'migrations/001_initial.ts',
      content,
      type: 'code'
    };
  }

  async renderConfig(spec: BuilderSpec, context: TemplateContext): Promise<GeneratedFile[]> {
    const packageJsonTemplate = `{
  "name": "{{name}}",
  "version": "1.0.0",
  "description": "{{description}}",
  "type": "module",
  "main": "index.js",
  "scripts": {
    "build": "tsc",
    "dev": "tsc --watch",
    "start": "node index.js",
    "db:migrate": "node scripts/migrate.js",
    "test": "node --test tests/*.test.js"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.0.0",
    "zod": "^3.22.0",
    "pg": "^8.11.0",
    "dotenv": "^16.3.0"
  },
  "devDependencies": {
    "@types/node": "^20.0.0",
    "@types/pg": "^8.10.0",
    "typescript": "^5.0.0"
  }
}`;

    const packageJson = this.renderTemplate(packageJsonTemplate, {
      name: this.toKebabCase(spec.name || 'generated-tool'),
      description: spec.description || 'Generated CRUD tool'
    });

    return [
      {
        path: 'package.json',
        content: packageJson,
        type: 'config'
      }
    ];
  }

  async renderTests(spec: BuilderSpec, context: TemplateContext): Promise<GeneratedFile[]> {
    // Simplified test generation for ABI compliance
    return [];
  }

  async renderDocs(spec: BuilderSpec, context: TemplateContext): Promise<GeneratedFile[]> {
    // Simplified docs generation for ABI compliance
    return [];
  }

  // Helper methods
  private getOperationType(actionType: string): string {
    const typeMap: Record<string, string> = {
      'create': 'create',
      'read': 'get',
      'update': 'update',
      'delete': 'delete',
      'list': 'list'
    };
    return typeMap[actionType] || 'handle';
  }

  private mapTypeToSql(type: string): string {
    const typeMap: Record<string, string> = {
      'string': 'TEXT',
      'number': 'NUMERIC',
      'boolean': 'BOOLEAN',
      'date': 'DATE',
      'timestamp': 'TIMESTAMP'
    };
    return typeMap[type] || 'TEXT';
  }

  private mapConstraintsToSql(field: any): string {
    const constraints: string[] = [];
    if (field.required) constraints.push('NOT NULL');
    if (field.unique) constraints.push('UNIQUE');
    if (field.primaryKey) constraints.push('PRIMARY KEY');
    return constraints.join(' ');
  }
}

// Register the pack
import { templatePackRegistry } from './base.js';
templatePackRegistry.register(new CrudTemplatePack());