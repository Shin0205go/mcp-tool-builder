#!/usr/bin/env node

/**
 * Simple Note Tool - Minimal MCP Example
 * Generated by MCP Tool Builder
 */
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from '@modelcontextprotocol/sdk/types.js';
import { z } from 'zod';

// Simple in-memory note storage
interface Note {
  id: string;
  title: string;
  content: string;
  createdAt: Date;
  updatedAt: Date;
}

const notes = new Map<string, Note>();
let nextId = 1;

// Zod schemas for validation
const CreateNoteSchema = z.object({
  title: z.string().min(1, 'Title is required'),
  content: z.string().min(1, 'Content is required')
});

const GetNoteSchema = z.object({
  id: z.string().min(1, 'Note ID is required')
});

const UpdateNoteSchema = z.object({
  id: z.string().min(1, 'Note ID is required'),
  title: z.string().optional(),
  content: z.string().optional()
});

const DeleteNoteSchema = z.object({
  id: z.string().min(1, 'Note ID is required')
});

// Create MCP server
const server = new Server(
  {
    name: 'simple-note-tool',
    version: '1.0.0',
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// Tool: List all notes
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: 'create_note',
        description: 'Create a new note with title and content',
        inputSchema: {
          type: 'object',
          properties: {
            title: {
              type: 'string',
              description: 'Title of the note'
            },
            content: {
              type: 'string', 
              description: 'Content of the note'
            }
          },
          required: ['title', 'content']
        }
      },
      {
        name: 'get_note',
        description: 'Get a note by its ID',
        inputSchema: {
          type: 'object',
          properties: {
            id: {
              type: 'string',
              description: 'ID of the note to retrieve'
            }
          },
          required: ['id']
        }
      },
      {
        name: 'list_notes',
        description: 'List all notes',
        inputSchema: {
          type: 'object',
          properties: {}
        }
      },
      {
        name: 'update_note',
        description: 'Update an existing note',
        inputSchema: {
          type: 'object',
          properties: {
            id: {
              type: 'string',
              description: 'ID of the note to update'
            },
            title: {
              type: 'string',
              description: 'New title (optional)'
            },
            content: {
              type: 'string',
              description: 'New content (optional)'
            }
          },
          required: ['id']
        }
      },
      {
        name: 'delete_note',
        description: 'Delete a note by its ID',
        inputSchema: {
          type: 'object',
          properties: {
            id: {
              type: 'string',
              description: 'ID of the note to delete'
            }
          },
          required: ['id']
        }
      }
    ]
  };
});

// Tool implementations
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  try {
    const { name, arguments: args } = request.params;

    switch (name) {
      case 'create_note': {
        const { title, content } = CreateNoteSchema.parse(args);
        const id = String(nextId++);
        const now = new Date();
        
        const note: Note = {
          id,
          title,
          content,
          createdAt: now,
          updatedAt: now
        };
        
        notes.set(id, note);
        
        return {
          content: [
            {
              type: 'text',
              text: JSON.stringify(note, null, 2)
            }
          ]
        };
      }

      case 'get_note': {
        const { id } = GetNoteSchema.parse(args);
        const note = notes.get(id);
        
        if (!note) {
          return {
            content: [
              {
                type: 'text',
                text: `Note with ID ${id} not found`
              }
            ],
            isError: true
          };
        }
        
        return {
          content: [
            {
              type: 'text',
              text: JSON.stringify(note, null, 2)
            }
          ]
        };
      }

      case 'list_notes': {
        const allNotes = Array.from(notes.values());
        
        return {
          content: [
            {
              type: 'text',
              text: allNotes.length > 0 
                ? JSON.stringify(allNotes, null, 2)
                : 'No notes found'
            }
          ]
        };
      }

      case 'update_note': {
        const { id, title, content } = UpdateNoteSchema.parse(args);
        const note = notes.get(id);
        
        if (!note) {
          return {
            content: [
              {
                type: 'text',
                text: `Note with ID ${id} not found`
              }
            ],
            isError: true
          };
        }
        
        if (title !== undefined) note.title = title;
        if (content !== undefined) note.content = content;
        note.updatedAt = new Date();
        
        notes.set(id, note);
        
        return {
          content: [
            {
              type: 'text',
              text: JSON.stringify(note, null, 2)
            }
          ]
        };
      }

      case 'delete_note': {
        const { id } = DeleteNoteSchema.parse(args);
        const deleted = notes.delete(id);
        
        if (!deleted) {
          return {
            content: [
              {
                type: 'text',
                text: `Note with ID ${id} not found`
              }
            ],
            isError: true
          };
        }
        
        return {
          content: [
            {
              type: 'text',
              text: `Note with ID ${id} deleted successfully`
            }
          ]
        };
      }

      default:
        return {
          content: [
            {
              type: 'text',
              text: `Unknown tool: ${name}`
            }
          ],
          isError: true
        };
    }
  } catch (error: any) {
    return {
      content: [
        {
          type: 'text',
          text: `Error: ${error.message}`
        }
      ],
      isError: true
    };
  }
});

// Start the server
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error('Simple Note Tool MCP server running on stdio');
}

main().catch(console.error);